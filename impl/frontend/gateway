#!/usr/bin/python

import sys
import getopt
import re
import time
from gateway import PassiveGateway
from log import Log, UDPWriter, StandardWriter

Log.config(level=Log.LEVEL_INFO)

DISPATCHER = 'DISPATCHER'
EVENT_HANDLER = 'EVENT_HANDLER'
LOG_SERVER_ADDRESS = 'LOG_SERVER_ADDRESS'
NAMESERVICE_ADDRESS = 'NAMESERVICE_ADDRESS'


def usage():
    print(
    """
    usage: ./gateway [<options>...]

    OPTIONS
        -h
            Show this message.

        -d, --dispatcher <architecture>
            The architecture of the event dispatcher. Can be one of the following:
                serial
                preemptive (disabled)
                cooperative (disabled)

        -e, --eventhandler <architecture>
            The architecture of the event handler. Same alternatives as for the
            dispatcher.

        -l, --logserver <address>:<port>
            The address and port of the log server.

        -n, --nameservice <address>:<port>
            The address and port of the nameservice.
    """
)


def parse_address(address_string):
    """ Parses address on the format <address>:<port> and returns a tuple.
    """

    m = re.match(r'^(\d+\.\d+\.\d+\.\d+):(\d+)$', address_string)

    if m:
        addr = m.group(1)
        port = int(m.group(2))
        return (addr, port)
    else:
        raise AttributeError('Not a valid address format')


def verify_parameters(configuration):
    valid_parameters = [
        DISPATCHER,
        EVENT_HANDLER,
        LOG_SERVER_ADDRESS,
        NAMESERVICE_ADDRESS]

    return all(param in configuration for param in valid_parameters)

def get_configuration_string(configuration):
    result = ''
    for param in configuration:
        result += '  {}: {}\n'.format(param, configuration[param])
    return result

def main(argv):
    logger = Log.get_logger(__name__, StandardWriter)

    try:
        opts, args = getopt.getopt(
            argv,
            'hd:e:l:n:',
            [
                'dispatcher=',
                'eventhandler=',
                'logserver=',
                'nameservice='
            ])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    configuration = {}

    for opt, arg in opts:
        if opt == '-h':
            usage()
            return
        if opt in ('-d', '--dispatcher'):
            configuration[DISPATCHER] = arg
        if opt in ('-e', '--eventhandler'):
            configuration[EVENT_HANDLER] = arg
        if opt in ('-l', '--logserver'):
            configuration[LOG_SERVER_ADDRESS] = parse_address(arg)
        if opt in ('-n', '--nameservice'):
            configuration[NAMESERVICE_ADDRESS] = parse_address(arg)

    logger.debug('Read configuration: \n{}',
            get_configuration_string(configuration))

    if verify_parameters(configuration):
        writer = UDPWriter(configuration[LOG_SERVER_ADDRESS])
        Log.config(default_writer=writer)

        gw = PassiveGateway(configuration[NAMESERVICE_ADDRESS], argv)
        gw.start_server()

        if gw.verify_configuration(configuration):
            logger.info('Config OK')
            gw.register_devices()
        else:
            logger.error('Config not OK! Closing...')
            gw.close_server()
            sys.exit(2)

        logger.info('Start')

        try:
            while True:
                gw.get_events()
                time.sleep(1)
        except KeyboardInterrupt:
            gw.close_server()

    else:
        usage()
        return


if __name__ == '__main__':
    main(sys.argv[1:])
