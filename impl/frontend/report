#!/usr/bin/python

import sys
import getopt
import time
import re
from db import Database, Scenario, EventLifecycle, Configuration, TestReport
from log import now

def parse_time(time_str):
    match = re.match(r'^(\d+h)?(\d+m)?(\d+s)?$', time_str)

    if match:
        h = match.group(1)
        m = match.group(2)
        s = match.group(3)

        h = int(h[:-1]) if h is not None else 0
        m = int(m[:-1]) if m is not None else 0
        s = int(s[:-1]) if s is not None else 0

        return ((h * 3600) + (m * 60) + s) * 1000
    else:
        return 0

class Report:
    """ Read test data from the database.
    """

    TPAD = 20

    def __init__(self):
        self.lifecycle_table = EventLifecycle()
        self.scenario_table = Scenario()
        self.configuration_table = Configuration()
        self.test_report = TestReport()

    def get_scenario(self, sid):
        return self.scenario_table.get_last_scenario() \
                if sid is None else \
                self.scenario_table.get_scenario(sid)

    def print_configuration(self, sid):
        config = self.configuration_table.get_configuration(sid)

        for row in config:
            key = row[1]
            value = row[2]

            print('  {}{}'.format(key.ljust(Report.TPAD), value))

    def print_scenario(self, sid=None):
        scenario = self.get_scenario(sid)
        sid = scenario[0]
        start_time = scenario[2]
        end_time = scenario[3]
        duration_time = 0

        if start_time is not None:
            if end_time is not None:
                duration_time = int((end_time - start_time) / 1000)

            start_time = time.localtime(int(start_time) / 1000)
            start_time = time.asctime(start_time)

        print(sid)
        print('  {}{}'.format('START'.ljust(Report.TPAD), start_time))
        print('  {}{} s'.format('DURATION'.ljust(Report.TPAD), duration_time))
        self.print_configuration(sid)

        count_created = self.lifecycle_table.count_created_events(sid)
        count_fetched = self.lifecycle_table.count_fetched_events(sid)
        count_retrieved = self.lifecycle_table.count_retrieved_events(sid)
        count_dispatched = self.lifecycle_table.count_dispatched_events(sid)
        count_processed = self.lifecycle_table.count_processed_events(sid)

        processed_ratio = float(count_processed) / float(count_created) \
                if count_created != 0 else 0

        throughput = 0 if duration_time == 0 else \
                float(count_processed) / float(duration_time)
        avg_d0 = self.lifecycle_table.avg_d0(sid)
        avg_d1 = self.lifecycle_table.avg_d1(sid)
        avg_d2 = self.lifecycle_table.avg_d2(sid)
        stdev_d0 = self.lifecycle_table.stdev_d0(sid)
        stdev_d1 = self.lifecycle_table.stdev_d1(sid)
        stdev_d2 = self.lifecycle_table.stdev_d2(sid)
        min_d0 = self.lifecycle_table.min_d0(sid)
        min_d1 = self.lifecycle_table.min_d1(sid)
        min_d2 = self.lifecycle_table.min_d2(sid)
        max_d0 = self.lifecycle_table.max_d0(sid)
        max_d1 = self.lifecycle_table.max_d1(sid)
        max_d2 = self.lifecycle_table.max_d2(sid)

        print('  {}{} created events'.format(
            'COUNT'.ljust(Report.TPAD),
            count_created))
        print('  {}{} fetched events'.format(''.ljust(Report.TPAD), count_fetched))
        print('  {}{} retrieved events'.format(''.ljust(Report.TPAD), count_retrieved))
        print('  {}{} dispatched events'.format(''.ljust(Report.TPAD), count_dispatched))
        print('  {}{} processed events'.format(''.ljust(Report.TPAD), count_processed))
        print('  {}{} proc/created'.format('RATIO'.ljust(Report.TPAD), processed_ratio))
        print('  {}{} events/s'.format(
            'THROUGHPUT'.ljust(Report.TPAD),
            throughput))
        print('  {}avg {} ms'.format('D0'.ljust(Report.TPAD), avg_d0))
        print('  {}stdev {} ms'.format(''.ljust(Report.TPAD), stdev_d0))
        print('  {}min {} ms'.format(''.ljust(Report.TPAD), min_d0))
        print('  {}max {} ms'.format(''.ljust(Report.TPAD), max_d0))
        print('  {}avg {} ms'.format('D1'.ljust(Report.TPAD), avg_d1))
        print('  {}stdev {} ms'.format(''.ljust(Report.TPAD), stdev_d1))
        print('  {}min {} ms'.format(''.ljust(Report.TPAD), min_d1))
        print('  {}max {} ms'.format(''.ljust(Report.TPAD), max_d1))
        print('  {}avg {} ms'.format('D2'.ljust(Report.TPAD), avg_d2))
        print('  {}stdev {} ms'.format(''.ljust(Report.TPAD), stdev_d2))
        print('  {}min {} ms'.format(''.ljust(Report.TPAD), min_d2))
        print('  {}max {} ms'.format(''.ljust(Report.TPAD), max_d2))

    def print_scenarios(self, time_str=None):
        if time_str is None:
            from_time = 0
        else:
            from_time = now() - parse_time(time_str)

        scenarios = self.scenario_table.get_scenarios(from_time)
        result = ''

        for scenario in scenarios:
            sid = scenario[0]
            self.print_scenario(sid)
            print('')

    def print_events(self, sid=None):
        tpad = 12

        if sid is None:
            scenario = self.scenario_table.get_last_scenario()
            sid = scenario[0]

        events = self.lifecycle_table.get_events(sid)

        print('{}{}{}{}{}{}'.format(
            'Event'.ljust(45),
            'Created'.rjust(tpad),
            'Fetched'.rjust(tpad),
            'Retrieved'.rjust(tpad),
            'Dispatched'.rjust(tpad),
            'Done'.rjust(tpad)))

        for event in events:
            eid = event[0]
            created_time = str(event[2])
            fetched_time = str(event[3])
            retrieved_time = str(event[4])
            dispatched_time = str(event[5])
            done_time = str(event[6])

            print('{}{}{}{}{}{}'.format(
                eid.ljust(45),
                created_time.rjust(tpad),
                fetched_time.rjust(tpad),
                retrieved_time.rjust(tpad),
                dispatched_time.rjust(tpad),
                done_time.rjust(tpad)))

    def print_events_csv(self, sid):
        events = self.lifecycle_table.get_events(sid)

        print('Event,Created,Fetched,Retrieved,Dispatched,Done')

        for event in events:
            eid = event[1]
            created_time = str(event[2])
            fetched_time = str(event[3])
            retrieved_time = str(event[4])
            dispatched_time = str(event[5])
            done_time = str(event[6])

            print('{},{},{},{},{},{}'.format(
                eid,
                created_time,
                fetched_time,
                retrieved_time,
                dispatched_time,
                done_time))

    def print_reports(self):
        reports = self.test_report.get_reports()

        for report in reports:
            name = report[0]
            end_time = report[1]
            end_time = time.localtime(int(end_time) / 1000)
            end_time = time.asctime(end_time)

            print('  {}{}'.format(end_time.ljust(30), name))

    def print_report_csv(self, name):
        stats = self.test_report.get_report(name)
        header = ['scenario',
                'duration',
                'pool size',
                'k0',
                'k1',
                'quantity',
                'frequency',
                'delay',
                'l0',
                'l1',
                'created',
                'fetched',
                'retrieved',
                'dispatched',
                'done',
                'avg d0',
                'stdev d0',
                'min d0',
                'max d0',
                'avg d1',
                'stdev d1',
                'min d1',
                'max d1',
                'avg d2',
                'stdev d2',
                'min d2',
                'max d2',
                'throughput',
                'done ratio']

        print(('{};' * len(header)).format(*header)[:-1])

        for stat in stats:
            stat_str = ('{};' * len(stat)).format(*stat)[:-1]
            stat_str = stat_str.replace('.', ',')
            print(stat_str)

    def delete_report(self, name):
        self.test_report.delete_report(name)
        self.print_reports()

def parse_input(argv):
    method = argv.pop(0)
    args = argv if len(argv) > 0 else []

    return {
        'method': method,
        'args': args
    }

def usage():
    print(
    """
    usage: ./report [<options>...] <method> [<arg>...]

    OPTIONS
        -b, --dbpath <path>
            The path and name to the database. Defaults to \"db\".

    METHODS
        print_reports
            Print all reports found in the database.

        print_report_csv <name>
            Print all scenarios from the report with all relevant data in a csv
            format.

        print_scenarios
            Print all scenarios and their configurations in the database
            ordered by date.

        print_events <sid>
            Print all events from scenario <sid>.

        print_events_csv <sid>
            Print all events in a csv format.
    """
    )

def main(argv):
    db_path = 'db'

    if len(argv) == 0:
        usage()
        return

    try:
        opts, args = getopt.getopt(argv, 'b:', ['dbpath='])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    for opt, arg in opts:
        if opt in ('-b', '--dbpath'):
            db_path = arg

    Database.PATH = db_path
    cmd = parse_input(args)
    report = Report()
    getattr(report, cmd['method'])(*cmd['args'])

if __name__ == '__main__':
    main(sys.argv[1:])
