#!/usr/bin/python

import sys
import getopt
import time
from db import Database, Scenario, EventLifecycle, Configuration

class Report:
    """ Read test data from the database.
    """

    def __init__(self):
        self.lifecycle_table = EventLifecycle()
        self.scenario_table = Scenario()
        self.configuration_table = Configuration()

    def print_configuration(self, sid):
        config = self.configuration_table.get_configuration(sid)

        for row in config:
            key = row[1]
            value = row[2]

            print('  {}{}'.format(key.ljust(20), value))

    def print_scenario(self, sid=None):
        tpad = 20
        scenario = self.scenario_table.get_last_scenario() \
                if sid is None else \
                self.scenario_table.get_scenario(sid)
        sid = scenario[0]
        start_time = scenario[2]
        end_time = scenario[3]
        duration_time = 0

        if start_time is not None:
            if end_time is not None:
                duration_time = int((end_time - start_time) / 1000)

            start_time = time.localtime(int(start_time) / 1000)
            start_time = time.asctime(start_time)

        print(sid)
        print('  {}{}'.format('START'.ljust(tpad), start_time))
        print('  {}{} s'.format('DURATION'.ljust(tpad), duration_time))
        self.print_configuration(sid)

        count_created = self.lifecycle_table.count_created_events(sid)
        count_fetched = self.lifecycle_table.count_fetched_events(sid)
        count_retrieved = self.lifecycle_table.count_retrieved_events(sid)
        count_dispatched = self.lifecycle_table.count_dispatched_events(sid)
        count_processed = self.lifecycle_table.count_processed_events(sid)

        processed_ratio = float(count_processed) / float(count_created) \
                if count_created != 0 else 0

        throughput = 0 if duration_time == 0 else \
                float(count_processed) / float(duration_time)
        d0 = self.lifecycle_table.avg_d0(sid)
        d0 = int(d0) if d0 is not None else 0

        print('  {}{} created events'.format(
            'COUNT'.ljust(tpad),
            count_created))
        print('  {}{} fetched events'.format(''.ljust(tpad), count_fetched))
        print('  {}{} retrieved events'.format(''.ljust(tpad), count_retrieved))
        print('  {}{} dispatched events'.format(''.ljust(tpad), count_dispatched))
        print('  {}{} processed events'.format(''.ljust(tpad), count_processed))
        print('  {}{} proc/created'.format('RATIO'.ljust(tpad), processed_ratio))
        print('  {}{} events/s'.format(
            'THROUGHPUT'.ljust(tpad),
            throughput))
        print('  {}{} ms'.format('D0'.ljust(tpad), d0))

    def print_scenarios(self):
        scenarios = self.scenario_table.get_scenarios()
        result = ''

        for scenario in scenarios:
            sid = scenario[0]
            self.print_scenario(sid)
            print('')

    def print_events(self, sid=None):
        tpad = 12

        if sid is None:
            scenario = self.scenario_table.get_last_scenario()
            sid = scenario[0]

        events = self.lifecycle_table.get_events(sid)

        print('{}{}{}{}{}{}'.format(
            'Event'.ljust(45),
            'Created'.rjust(tpad),
            'Fetched'.rjust(tpad),
            'Retrieved'.rjust(tpad),
            'Dispatched'.rjust(tpad),
            'Done'.rjust(tpad)))

        for event in events:
            eid = event[0]
            created_time = str(event[2])
            fetched_time = str(event[3])
            retrieved_time = str(event[4])
            dispatched_time = str(event[5])
            done_time = str(event[6])

            print('{}{}{}{}{}{}'.format(
                eid.ljust(45),
                created_time.rjust(tpad),
                fetched_time.rjust(tpad),
                retrieved_time.rjust(tpad),
                dispatched_time.rjust(tpad),
                done_time.rjust(tpad)))

    def print_events_csv(self, sid):
        events = self.lifecycle_table.get_events(sid)

        print('Event,Created,Fetched,Retrieved,Dispatched,Done')

        for event in events:
            eid = event[1]
            created_time = str(event[2])
            fetched_time = str(event[3])
            retrieved_time = str(event[4])
            dispatched_time = str(event[5])
            done_time = str(event[6])

            print('{},{},{},{},{},{}'.format(
                eid,
                created_time,
                fetched_time,
                retrieved_time,
                dispatched_time,
                done_time))

def parse_input(argv):
    method = argv.pop(0)
    args = argv if len(argv) > 0 else []

    return {
        'method': method,
        'args': args
    }

def usage():
    print(
    """
    usage: ./report [<options>...] <method> [<arg>...]

    OPTIONS
        -b, --dbpath <path>
            The path and name to the database. Defaults to \"db\".

    METHODS
        print_scenarios
            Print all scenarios and their configurations in the database
            ordered by date.

        print_events <sid>
            Print all events from scenario <sid>.

        print_events_csv <sid>
            Print all events in a csv format.
    """
    )

def main(argv):
    db_path = 'db'

    if len(argv) == 0:
        usage()
        return

    try:
        opts, args = getopt.getopt(argv, 'b:', ['dbpath='])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    for opt, arg in opts:
        if opt in ('-b', '--dbpath'):
            db_path = arg

    Database.PATH = db_path
    cmd = parse_input(args)
    report = Report()
    getattr(report, cmd['method'])(*cmd['args'])

if __name__ == '__main__':
    main(sys.argv[1:])
